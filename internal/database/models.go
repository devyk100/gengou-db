// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package database

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type ChoiceAnswerOptions string

const (
	ChoiceAnswerOptionsA ChoiceAnswerOptions = "a"
	ChoiceAnswerOptionsB ChoiceAnswerOptions = "b"
	ChoiceAnswerOptionsC ChoiceAnswerOptions = "c"
	ChoiceAnswerOptionsD ChoiceAnswerOptions = "d"
)

func (e *ChoiceAnswerOptions) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ChoiceAnswerOptions(s)
	case string:
		*e = ChoiceAnswerOptions(s)
	default:
		return fmt.Errorf("unsupported scan type for ChoiceAnswerOptions: %T", src)
	}
	return nil
}

type NullChoiceAnswerOptions struct {
	ChoiceAnswerOptions ChoiceAnswerOptions
	Valid               bool // Valid is true if ChoiceAnswerOptions is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullChoiceAnswerOptions) Scan(value interface{}) error {
	if value == nil {
		ns.ChoiceAnswerOptions, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ChoiceAnswerOptions.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullChoiceAnswerOptions) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ChoiceAnswerOptions), nil
}

type ExternalContentType string

const (
	ExternalContentTypePdf          ExternalContentType = "pdf"
	ExternalContentTypeVideo        ExternalContentType = "video"
	ExternalContentTypeYoutubeVideo ExternalContentType = "youtube_video"
	ExternalContentTypeUrl          ExternalContentType = "url"
	ExternalContentTypeImage        ExternalContentType = "image"
	ExternalContentTypeDocument     ExternalContentType = "document"
)

func (e *ExternalContentType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ExternalContentType(s)
	case string:
		*e = ExternalContentType(s)
	default:
		return fmt.Errorf("unsupported scan type for ExternalContentType: %T", src)
	}
	return nil
}

type NullExternalContentType struct {
	ExternalContentType ExternalContentType
	Valid               bool // Valid is true if ExternalContentType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullExternalContentType) Scan(value interface{}) error {
	if value == nil {
		ns.ExternalContentType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ExternalContentType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullExternalContentType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ExternalContentType), nil
}

type QuestionItemType string

const (
	QuestionItemTypeFillInTheBlanks      QuestionItemType = "FillInTheBlanks"
	QuestionItemTypeSingleChoiceQuestion QuestionItemType = "SingleChoiceQuestion"
	QuestionItemTypeMultiChoiceQuestion  QuestionItemType = "MultiChoiceQuestion"
	QuestionItemTypeFillWholeSentence    QuestionItemType = "FillWholeSentence"
)

func (e *QuestionItemType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = QuestionItemType(s)
	case string:
		*e = QuestionItemType(s)
	default:
		return fmt.Errorf("unsupported scan type for QuestionItemType: %T", src)
	}
	return nil
}

type NullQuestionItemType struct {
	QuestionItemType QuestionItemType
	Valid            bool // Valid is true if QuestionItemType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullQuestionItemType) Scan(value interface{}) error {
	if value == nil {
		ns.QuestionItemType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.QuestionItemType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullQuestionItemType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.QuestionItemType), nil
}

type UserType string

const (
	UserTypeLearner    UserType = "Learner"
	UserTypeInstructor UserType = "Instructor"
)

func (e *UserType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserType(s)
	case string:
		*e = UserType(s)
	default:
		return fmt.Errorf("unsupported scan type for UserType: %T", src)
	}
	return nil
}

type NullUserType struct {
	UserType UserType
	Valid    bool // Valid is true if UserType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserType) Scan(value interface{}) error {
	if value == nil {
		ns.UserType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserType), nil
}

type Assignment struct {
	ID         int32
	Title      string
	TotalMarks int32
	CourseID   int32
}

type AssignmentToQuestionMapping struct {
	ID         int32
	QuestionID int32
}

type Conversation struct {
	ID    int32
	Title string
}

type ConversationChat struct {
	ID             int32
	ConversationID int32
	Content        string
	UserID         string
	Timestamp      pgtype.Timestamp
	ImageUrl       pgtype.Text
	DocumentS3Url  pgtype.Text
	VideoS3Url     pgtype.Text
}

type ConversationToUserMapping struct {
	ID                int32
	ConversationID    int32
	UserID            string
	SendPermission    bool
	ReceivePermission bool
}

type Course struct {
	ID                  int32
	Language            string
	Title               string
	Content             string
	OneTimePrice        pgtype.Int4
	MonthlyPrice        pgtype.Int4
	OneTimePricePremium pgtype.Int4
	MonthlyPricePremium pgtype.Int4
	DemoContent         pgtype.Text
	Testimonials        pgtype.Text
	TotalMarks          int32
}

type CourseToInstructorMapping struct {
	ID     int32
	UserID string
}

type CourseToLearnerMapping struct {
	ID                int32
	UserID            string
	CourseGradedMarks int32
}

type ExternalContentItem struct {
	ID     int32
	Title  string
	S3Url  string
	By     string
	UserID string
	PageID int32
}

type FillInTheBlanksAnswer struct {
	ID             int32
	PossibleAnswer string
	QuestionID     int32
}

type FillInTheBlanksQuestion struct {
	ID       int32
	Question string
}

type FillWholeSentenceQuestion struct {
	ID             int32
	QuestionString string
}

type FillWholeSentenceSolution struct {
	ID           int32
	AnswerString string
	QuestionID   int32
}

type FlashCard struct {
	ID               int32
	FrontSide        string
	BackSide         string
	QuestionAudioUrl pgtype.Text
	AnswerAudioUrl   pgtype.Text
	QuestionImageUrl pgtype.Text
	AnswerImageUrl   pgtype.Text
	FlashcardgroupID int32
}

type FlashCardGroup struct {
	ID    int32
	Title string
}

type Lesson struct {
	ID       int32
	ByID     string
	CourseID int32
}

type LiveChat struct {
	ID          int32
	LiveClassID int32
	ByUserID    string
	Text        string
	DiffTime    int32
}

type LiveClass struct {
	ID        int32
	Title     string
	StartTime pgtype.Timestamp
	EndTime   pgtype.Timestamp
}

type LiveClassToInstructorMapping struct {
	ID          int32
	LiveClassID int32
	UserID      string
}

type LiveClassToLearnersMapping struct {
	ID          int32
	LiveClassID int32
	UserID      string
}

type MultiChoiceAnswer struct {
	ID           int32
	QuestionID   int32
	AnswerString string
	IsCorrect    bool
	Option       ChoiceAnswerOptions
}

type MultiChoiceQuestion struct {
	ID       int32
	Question string
}

type Page struct {
	ID       int32
	Content  string
	LessonID int32
	PageNo   int32
}

type QuestionItem struct {
	ID           int32
	Title        string
	Type         QuestionItemType
	ItemID       int32
	PageID       pgtype.Int4
	AssignmentID pgtype.Int4
	TotalScore   int32
}

type QuestionItemScore struct {
	ID             int32
	Remarks        pgtype.Text
	Score          int32
	Percentage     int32
	QuestionItemID int32
}

type SingleChoiceAnswer struct {
	ID           int32
	QuestionID   int32
	AnswerString string
	Option       ChoiceAnswerOptions
}

type SingleChoiceQuestion struct {
	ID            int32
	Question      string
	CorrectAnswer ChoiceAnswerOptions
}

type User struct {
	ID              int32
	UserID          string
	Name            string
	UserType        UserType
	EmailID         string
	Phone           string
	PastExperiences pgtype.Text
}

type UserFlashCard struct {
	ID                       int32
	UserflashcardgroupID     int32
	FlashcardID              int32
	ModifiedFrontSide        string
	ModifiedBackSide         string
	ModifiedQuestionAudioUrl pgtype.Text
	ModifiedAnswerAudioUrl   pgtype.Text
	ModifiedQuestionImageUrl pgtype.Text
	ModifiedAnswerImageUrl   pgtype.Text
	ReviewFactor             int32
	ReviewInterval           int32
}

type UserFlashCardGroup struct {
	ID                 int32
	FlashcardgroupID   int32
	GraduatingInterval int32
	EasyInterval       int32
	NewCardsPerDay     int32
	MaxReviewsPerDay   int32
	LearningSteps      int64
}

type WhiteboardEvent struct {
	ID          int32
	DiffTime    int32
	DiffContent string
	LiveclassID int32
}

type WhiteboardSlide struct {
	ID          int32
	SlideNo     int32
	LiveclassID int32
}
