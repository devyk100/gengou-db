// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAUser = `-- name: GetAUser :one
SELECT id, user_id, name, user_type, email_id, phone, past_experiences FROM "User"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getAUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.UserType,
		&i.EmailID,
		&i.Phone,
		&i.PastExperiences,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, user_id, name, user_type, email_id, phone, past_experiences FROM "User"
LIMIT 5
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.UserType,
			&i.EmailID,
			&i.Phone,
			&i.PastExperiences,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertInstructor = `-- name: InsertInstructor :one
INSERT INTO "User" (
                    name, user_id, email_id, phone, past_experiences, user_type
) VALUES (
          $1, $2, $3, $4, $5, 'Instructor'
         ) RETURNING id, user_id, name, user_type, email_id, phone, past_experiences
`

type InsertInstructorParams struct {
	Name            string
	UserID          string
	EmailID         string
	Phone           string
	PastExperiences pgtype.Text
}

func (q *Queries) InsertInstructor(ctx context.Context, arg InsertInstructorParams) (User, error) {
	row := q.db.QueryRow(ctx, insertInstructor,
		arg.Name,
		arg.UserID,
		arg.EmailID,
		arg.Phone,
		arg.PastExperiences,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.UserType,
		&i.EmailID,
		&i.Phone,
		&i.PastExperiences,
	)
	return i, err
}

const insertLearner = `-- name: InsertLearner :one
INSERT INTO "User" (
    name, user_id, email_id, phone, user_type
) VALUES (
             $1, $2, $3, $4, 'Learner'
         ) RETURNING id, user_id, name, user_type, email_id, phone, past_experiences
`

type InsertLearnerParams struct {
	Name    string
	UserID  string
	EmailID string
	Phone   string
}

func (q *Queries) InsertLearner(ctx context.Context, arg InsertLearnerParams) (User, error) {
	row := q.db.QueryRow(ctx, insertLearner,
		arg.Name,
		arg.UserID,
		arg.EmailID,
		arg.Phone,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.UserType,
		&i.EmailID,
		&i.Phone,
		&i.PastExperiences,
	)
	return i, err
}
